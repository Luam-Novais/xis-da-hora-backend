async register(user: IUser): Promise<IUser | object | Error> {
    const emailExisting = await this.userRepository.findByEmail(user.email);
    if (emailExisting) return new ErrorHandlerHttp(400, 'Email ja cadastrado!');
    const userFormated: IUser = this.userFormater(user)
    const userCreated = await this.userRepository.register(userFormated);
    if (userCreated instanceof Error) return userCreated;
    else {
      const payload = {
        id: userCreated.id,
        name: userCreated.name,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET_KEY, { expiresIn: '1h' });
      return { userCreated, token };
    }
  }


  private userFormater(user:IUser): IUser{
    return  {
      name: formatString(user.name),
      email: formatString(user.email),
      phone: formatString(user.phone),
      address: formatString(user.address),
      cep: formatString(user.cep).replace('-', '').replace('.', ''),
      password: bcrypt.hashSync(user.password, 10),
    };
  }